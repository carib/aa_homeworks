c
options
c
options.map { |key, val| "#{key} = #{val.is_a?(String) ? "'#{val}'" : val}"}.join(" OR ")
options.map { |key, val| "#{key} = #{val.is_a?(String) ? "'#{val}'" : val}"}
options
c
options.map { |key, val| "#{key} = ? = #{val.is_a?(String) ? "'#{val}'" : val} = ?"}.join(" OR ")
list
c
options.keys.map { |key|  "#{key} = #{options[key]}" }.join(" OR ")
list
c
options.each_key { |key|  "#{key} = #{options[key]}" }
list
c
options.map { |key, val| "#{key} = #{val.is_a?(String) ? "'#{val}'" : val}"}.join(" AND ")
list
c
options.map { |key, val| "#{key} = #{val.is_a? Integer ? val.to_i : val}"}.join(" AND ")
list
c
options.each { |key, val| "#{key} = #{val}"}.join(" AND ")
list
c
options.map { |key, val| "#{key} = '#{val}'"}.join(" AND ")
list
c
options.map { |key, val| "#{key} = #{val}"}.join(" AND ")
list
options
c
i_vars
exit
id
t_names
i_vars
t_names.split(", ").map { |t| "#{t} = ?"}.join(", ")
exit
i_vars.first
lname
fname
id
id = ?
t_names.split(", ").map { |t| t += ' = ?'}.join(", ")
self.class.name.tableize
i_vars
exit
t_names.split(", ").map { |t| t += '= ?'}.join(", ")
exit
t_names.map { |t| t += '= ?'}
c
value_insterp
c
load 'mb.rb'
load 
value_insterp
c
self.class.name.tableize
value_interp
vvalue_interp)
@lname
@fname
value_insterp
value_interp
exit
list
c
nc
n
nn
n
s
self.class.name.tableize
exit
value_insterp
value_interp
@lname
@fname
exit
display value_interp
c
n
options
exit
options
n
id
@id
id
exit
@id
@lname
@fname
exit
self
@lname
@fname
value_insterp
value_interp
exit
value_interp
exit
self.instance_variables.map(&:to_s)[1..-1].join(", ")
c
self.instance_variables.map(&:to_s).join(", ")
c
n
s
c
options
exit
options
@id
exit
options
exit
options
@title
n
s
@id
n
s
options
